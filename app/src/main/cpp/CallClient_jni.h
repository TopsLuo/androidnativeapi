// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/examples/androidnativeapi/CallClient

#ifndef org_webrtc_examples_androidnativeapi_CallClient_JNI
#define org_webrtc_examples_androidnativeapi_CallClient_JNI

#include <jni.h>

#include "sdk/android/src/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_examples_androidnativeapi_CallClient[];
const char kClassPath_org_webrtc_examples_androidnativeapi_CallClient[] =
    "org/webrtc/examples/androidnativeapi/CallClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_webrtc_examples_androidnativeapi_CallClient_clazz(nullptr);
#ifndef org_webrtc_examples_androidnativeapi_CallClient_clazz_defined
#define org_webrtc_examples_androidnativeapi_CallClient_clazz_defined
inline jclass org_webrtc_examples_androidnativeapi_CallClient_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_examples_androidnativeapi_CallClient,
      &g_org_webrtc_examples_androidnativeapi_CallClient_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  webrtc_examples {

static jlong JNI_CallClient_CreateClient(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller);

JNI_GENERATOR_EXPORT jlong Java_org_webrtc_examples_androidnativeapi_CallClient_nativeCreateClient(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_CallClient_CreateClient(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_webrtc_examples_androidnativeapi_CallClient_nativeCall(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAndroidCallClient,
    jobject localSink,
    jobject remoteSink) {
  AndroidCallClient* native = reinterpret_cast<AndroidCallClient*>(nativeAndroidCallClient);
  CHECK_NATIVE_PTR(env, jcaller, native, "Call");
  return native->Call(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, localSink),
      base::android::JavaParamRef<jobject>(env, remoteSink));
}

JNI_GENERATOR_EXPORT void Java_org_webrtc_examples_androidnativeapi_CallClient_nativeHangup(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAndroidCallClient) {
  AndroidCallClient* native = reinterpret_cast<AndroidCallClient*>(nativeAndroidCallClient);
  CHECK_NATIVE_PTR(env, jcaller, native, "Hangup");
  return native->Hangup(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void Java_org_webrtc_examples_androidnativeapi_CallClient_nativeDelete(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAndroidCallClient) {
  AndroidCallClient* native = reinterpret_cast<AndroidCallClient*>(nativeAndroidCallClient);
  CHECK_NATIVE_PTR(env, jcaller, native, "Delete");
  return native->Delete(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jobject
    Java_org_webrtc_examples_androidnativeapi_CallClient_nativeGetJavaVideoCapturerObserver(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeAndroidCallClient) {
  AndroidCallClient* native = reinterpret_cast<AndroidCallClient*>(nativeAndroidCallClient);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetJavaVideoCapturerObserver", NULL);
  return native->GetJavaVideoCapturerObserver(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}


}  // namespace  webrtc_examples

#endif  // org_webrtc_examples_androidnativeapi_CallClient_JNI
